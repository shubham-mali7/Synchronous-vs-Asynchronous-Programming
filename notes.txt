This part will be about asynchronous programming 
javascript is single threaded and synchronous programming language

> Defer likhna math bhoolna 

> ek ek kaam step by step hona isse kehte hai synchronous programming  

>synchronous programming mai koi code hamare further code ko block kar sakta hai and then asynchronous programming came into picture

> javascript is single threaded and synchronous programming language

> settimeput input leta hai ek function

> 1000ms matlab 1 sec 

> aap aisa niyam bana sakte ho ki setTimeout mai jo bhi callback function hai vo execute puri ki puri file run hone ke badh he hoga bhale usko kitna bhi vakta lagjaae

> setTimeout hamare aage vale code ko block nahi kar raha ye example hai asynchronous programming ki 

> setTimeout return mai deta hai ek id 

> Prmises are used to prevent callback hell (callBackInAsynch file contains callback hell and pyramid of loop explaination)

>  pyramid of doom (google ki bhasha mai)
 A pyramid of doom is a block of code that is so nested that you give up trying to mentally digest it. It usually comes in the form of a function within a function within a function within a function of some sort.

 > Prior to promises events and callback functions were used but they had limited functionalities and created unmanageable code. Multiple callback functions would create callback hell that leads to unmanageable code. Also it is not easy for any user to handle multiple callbacks at the same time

 >Promise ek aisi value hai jo hame abhi nahi pata but hume future mai patah hogi
 > promise represent karta hai future value jo hume abhi nahi pata but badme pata chalegi
 > Promise bhi browser ka feature hai toh voh bhi asynchronusly kaam karega 

 > As a javascript developer you will consume more promise as compared to producing a promise

 > resolve , reject , then , catch 

 > Promise add hote hai microtask queue mai   
 >settimeout setinterval vagera callback queue mai add hoti hai

 > callback queue or microtask queue ki comparison mai microtask queue ko jyada priority dee jati hai islea microtask queue pehle execute hota hai 

 >  ye behaviour sabh browsers mai same rehega  

 AJAX-----------------------------------------

 > Browser client hai or backEnd mai server hota hai or hame request karni hai server ko ki hame ye data chahie 
 > client or server ke bich jo communication hoti hai vo hoti hai http se

 >HTTP  -(Hyper Text Transfer Protocol)

 > REST Api (Representational State Transfer )

 > HTTP Verbs : GET POST PUT PATCH DELETE

 > https://jsonplaceholder.typicode.com/posts --------->(API link craeted by backend developer)
 > in above link posts is the path we want to go 

 > JSON mai jo object hai uske key value pairs ko double quotes mai likhna is compulsory

 > HTTP Status code :
1xx informational response – the request was received, continuing process
2xx successful – the request was successfully received, understood, and accepted
3xx redirection – further action needs to be taken in order to complete the request
4xx client error – the request contains bad syntax or cannot be fulfilled
5xx server error – the server failed to fulfil an apparently valid request

> onload method tabhi he chalti hai jab readystate 4 hoti hai

> onerror method is used to handle network errors

> GET Method --> data ko read karte vakta
> POST method --> data ko create karte vakta 

> (response) =>{       -------------> 1
    return response.json(); 
}

> response => response.json(); -----------> 2

> Both 1 and 2 are same only 2nd is another way to write in short

>--- Import Export --
> Created a folder 
> touch app.js index.html
> mkdir utils --> to create folder named utils 
> touch utils.js/age.js utils.js/fname.js